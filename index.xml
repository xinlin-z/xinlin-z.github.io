<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Xinlin&#39;s Blog</title>
    <link>https://xinlin-z.github.io/</link>
    <description>Recent content on Xinlin&#39;s Blog</description>
    <generator>Hugo -- 0.147.8</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Jul 2025 12:51:03 +1200</lastBuildDate>
    <atom:link href="https://xinlin-z.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Built-in Data Structures and Algorithms in Python</title>
      <link>https://xinlin-z.github.io/posts/builtin-dsa-python/</link>
      <pubDate>Fri, 18 Jul 2025 12:51:03 +1200</pubDate>
      <guid>https://xinlin-z.github.io/posts/builtin-dsa-python/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s very important to choose the proper data structure and algorithm for various programming tasks. Even when we are using high-level programming language such as Python, it&amp;rsquo;s still crucial in terms of time and space complexity. In this post, I&amp;rsquo;ll try to summary all built-in data structures and algorithms in Python as a recap and reference. There are so many details which could be covered in this post, please refer to Python&amp;rsquo;s official documents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>https://xinlin-z.github.io/pages/about/</link>
      <pubDate>Mon, 14 Jul 2025 12:57:00 +1200</pubDate>
      <guid>https://xinlin-z.github.io/pages/about/</guid>
      <description>&lt;p&gt;I was a &lt;strong&gt;Software Engineer&lt;/strong&gt; with many years&amp;rsquo; experience, and now in my way to be an &lt;strong&gt;AI Engineer&lt;/strong&gt;. This is a little place where I organize my knowledge and skills, and express my technical ideas as well. Thanks for stopping by!&lt;/p&gt;
&lt;p&gt;Feel free to connect with me on &lt;a href=&#34;https://www.linkedin.com/in/xinlinz&#34;&gt;LinkedIn&lt;/a&gt; or &lt;a href=&#34;https://github.com/xinlin-z&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;notebook_nj.jpg&#34;
         alt=&#34;The earliest notebook I used when I was in Nanjing as a software engineer&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;The earliest notebook I used when I was in Nanjing as a software engineer&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prompt Engineering Review</title>
      <link>https://xinlin-z.github.io/posts/prompt-engineering-review/</link>
      <pubDate>Wed, 02 Jul 2025 11:14:25 +1200</pubDate>
      <guid>https://xinlin-z.github.io/posts/prompt-engineering-review/</guid>
      <description>&lt;p&gt;&lt;strong&gt;First Update on Oct. 2nd, 2025&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How you prompt the fine-tuned Large Language Model (LLM), such as ChatGPT or Gemini, decides generally what responses you can get. These techniques or tricks are called Prompt Engineering, which is one of the very basic skills that everyone should know a bit in today&amp;rsquo;s AI era. It&amp;rsquo;s crucial for both our daily life while talking with chatGPT or Gemini and building LLM-based AI agents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Backtracking Algorithm</title>
      <link>https://xinlin-z.github.io/posts/backtracking/</link>
      <pubDate>Wed, 18 Jun 2025 20:48:03 +1200</pubDate>
      <guid>https://xinlin-z.github.io/posts/backtracking/</guid>
      <description>&lt;p&gt;Backtracking algorithm is an elegant way to realize nested loop using recursive to search the solution space for your problem, especially for those problems that the depth of nested loop could not be determined beforehand. In this post, I try to demonstrate how to understand and code backtracking algorithm step by step with lots of examples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Take Algorithm as Technology!&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;what-is-backtracking-algorithm&#34;&gt;What is Backtracking Algorithm?&lt;/h2&gt;
&lt;p&gt;I would like to think of backtracking algorithm as a search method. Imaging you are in a forest and you need find a way out. There are multiple choices at each intersection, and you have no idea about which direction or path is right. So, you pick out one direction randomly or in any order you like and keep on going. If it is a dead end, you go back and choose another direction, otherwise you find a way out. During the whole process, there might be lots of &amp;ldquo;going back and choosing again&amp;rdquo; moments which is actually the spirit of backtracking.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
